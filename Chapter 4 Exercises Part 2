{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e7ea04d4-671d-481b-b634-57ff2f140d19",
   "metadata": {},
   "source": [
    "### Programming Exercises\n",
    "\n",
    "#### Question 4\n",
    "\n",
    "Distance Traveled\n",
    "\n",
    "The distance a vehicle travels can be calculated as follows:\n",
    "\n",
    "distance = speed * time\n",
    "\n",
    "For example, if a train travels 40 miles per hour for three hours, the distance traveled is 120 miles. Write a program that asks the user for the speed of a vehicle (in miles per hour) and the number of hours it has traveled. It should then use a loop to display the distance the vehicle has traveled for each hour of that time period. Here is an example of the desired output:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1f529808-443a-451c-9714-2a391a6791b0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the speed of the vehicle; \n",
      "Enter the hours traveled; \n"
     ]
    }
   ],
   "source": [
    "# Write code to prompt user for speed of vehicle, and hours traveled.\n",
    "print('Enter the speed of the vehicle; ')\n",
    "print('Enter the hours traveled; ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "80a407d6-de57-4cff-8660-e33d7946bfcf",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Have user answer the questions\n",
    "int(input())\n",
    "float(input())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "def95994-9562-468c-80fc-b7abd05bbec1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Created variables \n",
    "distance = \n",
    "speed = \n",
    "time = "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c096ee4a-7b20-40ab-ad14-68d6e31610fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create formula \n",
    "distance = speed * time "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9e4b35fe-0659-41cc-ac43-d15cd2a7c064",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the speed of the vehicle;  40\n",
      "Enter the hours traveled;  3\n"
     ]
    }
   ],
   "source": [
    "# Intergrate together \n",
    "speed = int(input('Enter the speed of the vehicle; '))\n",
    "time = float(input('Enter the hours traveled; '))\n",
    "distance = speed * time "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6942db2f-737c-41f8-b676-750189bec8e4",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the speed of the vehicle;  40\n",
      "Enter the hours traveled;  3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The distance traveled is; 120.0\n"
     ]
    }
   ],
   "source": [
    "# Create print statement to display answer to formula\n",
    "distance = 0 \n",
    "speed = int(input('Enter the speed of the vehicle; '))\n",
    "time = float(input('Enter the hours traveled; '))\n",
    "distance = speed * time \n",
    "print('The distance traveled is;', distance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1df7898f-376a-47b6-9175-21b49ec79bf9",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the speed of the vehicle;  40\n",
      "Enter the hours traveled;  3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "hour 1 40\n",
      "hour 2 80\n",
      "hour 3 120\n"
     ]
    }
   ],
   "source": [
    "# Create loop for each hour\n",
    "distance = 0 \n",
    "speed = int(input('Enter the speed of the vehicle; '))\n",
    "time = int(input('Enter the hours traveled; '))\n",
    "for time in range(1, 4):\n",
    "    distance = speed * time\n",
    "    print('hour', time, distance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "18e3932d-8ae3-4d2e-8353-77eaa6beb5db",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hour  Distance Traveled\n",
      "_________________________\n"
     ]
    }
   ],
   "source": [
    "# Create print statement to mimic question\n",
    "print('Hour ', 'Distance Traveled')\n",
    "print('_________________________')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "1f517871-c0b7-410f-aa8e-ba6f83ccc23a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the speed of the vehicle;  40\n",
      "Enter the hours traveled;  3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hour  Distance Traveled\n",
      "_________________________\n",
      "hour 1 40\n",
      "Hour  Distance Traveled\n",
      "_________________________\n",
      "hour 2 80\n",
      "Hour  Distance Traveled\n",
      "_________________________\n",
      "hour 3 120\n"
     ]
    }
   ],
   "source": [
    "distance = 0 \n",
    "speed = int(input('Enter the speed of the vehicle; '))\n",
    "time = int(input('Enter the hours traveled; '))\n",
    "for time in range(1, 4):\n",
    "    distance = speed * time\n",
    "    print('Hour ', 'Distance Traveled')\n",
    "    print('_________________________')\n",
    "    print('hour', time, distance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9383389e-3d2e-47ca-b1e9-d7a48f19c36d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the speed of the vehicle;  40\n",
      "Enter the hours traveled;  3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hour  Distance Traveled\n",
      "_________________________\n",
      "hour 1 40\n",
      "hour 2 80\n",
      "hour 3 120\n"
     ]
    }
   ],
   "source": [
    "distance = 0 \n",
    "speed = int(input('Enter the speed of the vehicle; '))\n",
    "time = int(input('Enter the hours traveled; '))\n",
    "print('Hour ', 'Distance Traveled')\n",
    "print('_________________________')\n",
    "for time in range(1, 4):\n",
    "    distance = speed * time\n",
    "    print('hour', time, distance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a4d90aa7-d889-4a21-8f8c-3e6eb6d8699f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the speed of the vehicle in mph;  40\n",
      "Enter the hours traveled;  3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hour  Distance Traveled\n",
      "_________________________\n",
      "hour 1 40\n",
      "hour 2 80\n",
      "hour 3 120\n"
     ]
    }
   ],
   "source": [
    "# Set variable distance == 0\n",
    "distance = 0 \n",
    "# Set variable speed == user input\n",
    "speed = int(input('Enter the speed of the vehicle in mph; '))\n",
    "# set variable time == user input\n",
    "time = int(input('Enter the hours traveled; '))\n",
    "# Create print statement for header \n",
    "print('Hour ', 'Distance Traveled')\n",
    "print('_________________________')\n",
    "# Create for staement to display each hour\n",
    "for time in range(1, 4):\n",
    "# Input formula\n",
    "    distance = speed * time\n",
    "# Print each hour in a list, and show answer to formula\n",
    "    print('hour', time, distance)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a7288b4-b542-41dc-b8dc-363eb28410ef",
   "metadata": {},
   "source": [
    "For this question I went back to my code for the bug collector problem, I use some of what I did there to complete this. I first broke everything down by making my variables, print and input statements and formula. The hardest part of this problem was making the loop statement, at first I wrote it (for hour in range(1, 4):) it was printing the answer to the formula 3 times and not 40, 80, 120. I then realize instead oh saying for hour, I need to say for time which is one of my variables. I put hours because I thought it was part of python language according to 4.7 nested loops in the text. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6a69de9-95b9-4094-ad25-a8643cb1c554",
   "metadata": {},
   "source": [
    "#### Question 13\n",
    "\n",
    "Write a program that uses nested loops to draw this pattern:\n",
    "\n",
    "'*******'\n",
    "\n",
    "'******'\n",
    "\n",
    "'*****'\n",
    "\n",
    "'****'\n",
    "\n",
    "'***'\n",
    "\n",
    "'**'\n",
    "\n",
    "'*'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b955af13-a5c0-4656-999c-207d9dd6c980",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (1940819996.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[10], line 2\u001b[0;36m\u001b[0m\n\u001b[0;31m    roll =\u001b[0m\n\u001b[0m           ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# Create new variables \n",
    "roll = \n",
    "column = "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "6dc6c7d4-6bba-4f38-b779-8a05cd4a988a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter number of rolls;  7\n",
      "Enter number of columns;  7\n"
     ]
    }
   ],
   "source": [
    "# Create input statements\n",
    "roll = int(input('Enter number of rolls; '))\n",
    "column = int(input('Enter number of columns; '))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d41f2ab0-f675-4797-8a12-aca3654eb37f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "incomplete input (3993777264.py, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  Cell \u001b[0;32mIn[1], line 5\u001b[0;36m\u001b[0m\n\u001b[0;31m    for column in range(roll + 1):\u001b[0m\n\u001b[0m                                  ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m incomplete input\n"
     ]
    }
   ],
   "source": [
    "# Create for statement to loop\n",
    "roll = int(input('Enter number of rolls; '))\n",
    "column = int(input('Enter number of columns; '))\n",
    "for roll in range(1, 8):\n",
    "    for column in range(roll + 1):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "da12b730-2f10-4f71-aa4d-c9cddff604cd",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter number of rolls;  7\n",
      "Enter number of columns;  7\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "**\n",
      "***\n",
      "****\n",
      "*****\n",
      "******\n",
      "*******\n",
      "********\n"
     ]
    }
   ],
   "source": [
    "# Add print function\n",
    "roll = int(input('Enter number of rolls; '))\n",
    "column = int(input('Enter number of columns; '))\n",
    "for roll in range(1, 8):\n",
    "    for column in range(roll + 1):\n",
    "        print('*', end='')\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e54c5e57-c5f9-4ed1-bd00-547fa787821e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter number of rolls;  7\n",
      "Enter number of columns;  7\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*******\n",
      "******\n",
      "*****\n",
      "****\n",
      "***\n",
      "**\n",
      "*\n"
     ]
    }
   ],
   "source": [
    "# Change statement to make * print the opposite way, get rid of + 1 which adds an * to the start\n",
    "roll = int(input('Enter number of rolls; '))\n",
    "column = int(input('Enter number of columns; '))\n",
    "for roll in range(7, 0, -1):\n",
    "    for column in range(roll):\n",
    "        print('*', end='')\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "f526b2f8-8ee8-4eb5-8b77-68253e9af44a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter number of rolls;  7\n",
      "Enter number of columns;  7\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*******\n",
      "******\n",
      "*****\n",
      "****\n",
      "***\n",
      "**\n",
      "*\n"
     ]
    }
   ],
   "source": [
    "# New variable roll == to user input\n",
    "roll = int(input('Enter number of rolls; '))\n",
    "# New variable column == to user input\n",
    "column = int(input('Enter number of columns; '))\n",
    "# Enter for statement for roll\n",
    "for roll in range(7, 0, -1):\n",
    "# Enter for statement for column\n",
    "    for column in range(roll):\n",
    "# Enter print statement to display *, and then end loop\n",
    "        print('*', end='')\n",
    "    print()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5364c61-8435-42ba-80fe-9578b2b50889",
   "metadata": {},
   "source": [
    "For this queston I got my setup from in the textbook, Using Nested Loops to Print Patterns. It walked me through on how I shoudl setup the code, The problem I had with this code was making it print of the opposite way. In the range I added -1 to make it count down backwards. Learning that from the chapter video walkthrough. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8868129b-f082-4b2e-b0e6-51f5c57c3830",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### Question 14\n",
    "\n",
    "Write a program that uses nested loops to draw this pattern:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ae148e4d-646b-4f10-aa34-ceeed39ce53d",
   "metadata": {},
   "outputs": [],
   "source": [
    "'##'\n",
    "\n",
    "'# #'\n",
    "\n",
    "'#  #'\n",
    "\n",
    "'#   #'\n",
    "\n",
    "'#    #'\n",
    "\n",
    "'#     #'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d1e3f012-81d0-4317-a747-75a5c600d175",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter number of rolls;  6\n",
      "Enter number of columns;  6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " ##\n",
      "  ##\n",
      "   ##\n",
      "    ##\n",
      "     ##\n",
      "      ##\n"
     ]
    }
   ],
   "source": [
    "roll = int(input('Enter number of rolls; '))\n",
    "column = int(input('Enter number of columns; '))\n",
    "for roll in range(6):\n",
    "    for column in range(roll + 1):\n",
    "        print(' ', end='')\n",
    "    print('#' + '#')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8942e05-121c-4235-9bbf-eb09d7fcf55c",
   "metadata": {},
   "source": [
    "For this promblem I thought I could litterly copy paste my code from question 13 and rearrange some things around and add a +1 to get the pattern but I couldnt figure this one out"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b98fc27-f59d-418f-a034-aa5823ee91cf",
   "metadata": {},
   "source": [
    "My thought proccess was, all I had to do is keep the same variables, roll and column set == to the users input. The for statement I believe is setup properly because im getting a form of the pattern that I want. Its just im not sure how to put spaces inbetween each hashtag. I started playing with the end of the code, doing trail and error to try to figure it out but couldnt. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
